/**
 * JavaCompiler.jj
 */

options {
  STATIC = false;
}

PARSER_BEGIN(JavaCompiler)

public class JavaCompiler {
	public static void main(String[] args) {
		try {
			String programa = Arquivo.Read("codigoTeste.txt");
			new JavaCompiler(new java.io.StringReader(programa)).RUN();

			System.out.println("\n\n Sintaxe exata. Compilado!!!");
		}
		catch(Throwable e) {
			System.out.println("\n\n Erro de sintaxe: " + e.getMessage());
		}
	}
}

PARSER_END(JavaCompiler)

//IGNORAR
SKIP:
{	" " | "\r" | "\t" | "\n"
 | <COMENTARIO_SIMPLES: "//" (<OBS>)*>
 | <COMENTARIOS_LONGO: "/" ("\n" | "\r" | <OBS>) "*/" >
 | <#OBS: ( ~["\"","\\","\n","\r"] | "\\" ( ["n","t","b","r","f","\\","\'","\""] | ( ["\n","\r"] | "\r\n")))*>
}

//PALAVRAS RESERVADAS
TOKEN :
{
      <INT: "int"> { System.out.println("Tipo int: " + image); }
    | <FLOAT: "float" > { System.out.println("Tipo Float: " + image); }
    | <BOOL: "bool"> { System.out.println("Tipo Bool: " + image); }
    | <STRING: "String" > { System.out.println("Tipo String: " + image); }
    | <NULL: "null" >  { System.out.println("Palavra Reservada: " + image); }
    | <IMPORT: "import" > { System.out.println("Palavra Reservada: " + image);}
    | <CLASS: "class" >  { System.out.println("Palavra Reservada: " + image); }
    | <MAIN: "main" >  { System.out.println("Palavra Reservada: " + image); }
    | <VOID: "void" >  { System.out.println("Tipo Void: " + image); }
    | <RETURN: "return" >  { System.out.println("Palavra Reservada: " + image); }
    | <STATIC: "static" >  { System.out.println("Palavra Reservada: " + image); }
    | <PRIVATE: "private" >  { System.out.println("Palavra Reservada: " + image); }
    | <PROTECTED: "protected" >  { System.out.println("Palavra Reservada: " + image); }
    | <PUBLIC: "public" >  { System.out.println("Palavra Reservada: " + image); }
    | <IF: "if" >  { System.out.println("Palavra Reservada: " + image); }
    | <ELSE_IF: "else if" >  { System.out.println("Palavra Reservada: " + image); }
    | <ELSE: "else" >  { System.out.println("Palavra Reservada: " + image); }
    | <TRUE: "true" >  { System.out.println("Palavra Reservada: " + image); }
    | <FALSE: "false" >  { System.out.println("Palavra Reservada: " + image); }
    | <PRINT: "System.out.println" >  { System.out.println("Palavra Reservada: " + image); }
    | <INPUT: "Scanner" >  { System.out.println("Palavra Reservada: " + image); }
    | <WHILE: "while" >  { System.out.println("Palavra Reservada: " + image); }
    | <BREAK: "break" >  { System.out.println("Palavra Reservada: " + image); }
    | <CONTINUE: "continue" >  { System.out.println("Palavra Reservada: " + image); }
}


// DELIMITADORES
TOKEN:
{
      <ABRE_PARENTESES: "("> { System.out.println("Abre Parentese: " + image); }
    | <FECHA_PARENTESES: ")"> { System.out.println("Fecha Parentese: " + image); }
    | <ABRE_CHAVE: "{"> { System.out.println("Abre Chaves: " + image); }
    | <FECHA_CHAVE: "}"> { System.out.println("Fecha Chaves: " + image); }
    | <ABRE_COLCHETE: "["> { System.out.println("Abre Cochetes: " + image); }
    | <FECHA_COLCHETE: "]"> { System.out.println("Fecha Cochetes: " + image); }
    | <PONTO_VIRGULA: ";"> { System.out.println("Ponto e Virgula: " + image); }
    | <VIRGULA: ","> { System.out.println("Virgula: " + image); }
    | <PONTO: "."> { System.out.println("Ponto: " + image); }
}


//OPERADORES
TOKEN :
{
    < RECEBE: "=" > { System.out.println("Operador de Atribuicao: " + image); }
  | < MAIOR: ">" > { System.out.println("Operador de Maior: " + image); }
  | < MENOR: "<" > { System.out.println("Operador de Menor: " + image); }
  | < NEGACAO: "!" > { System.out.println("Operador de Negação: " + image); }
  | < DOIS_PONTOS: ":" > { System.out.println("Operador de Dois Pontos: " + image); }
  | < IGUAL: "==" > { System.out.println("Operador de Igualdade: " + image); }
  | < MAIOR_IGUAL: " >=" > { System.out.println("Operador de Maior Igual: " + image); }
  | < MENOR_IGUAL: "<=" > { System.out.println("Operador de Menor Igual: " + image); }
  | < DIFERENTE: "!=" > { System.out.println("Operador de Diferente: " + image); }
  | < OR: "||" > { System.out.println("Operador Ou: " + image); }
  | < AND: "&&" > { System.out.println("Operador E: " + image); }
  | < INCREMENTO: "++" > { System.out.println("Operador de Incremento: " + image); }
  | < DECREMENTO: "--" > { System.out.println("Operador de Decremento: " + image); }
  | < MAIS: "+" > { System.out.println("Operador de Soma: " + image); }
  | < MENOS: "-" > { System.out.println("Operador de Subtracao: " + image); }
  | < ASTERISCO: "*" > { System.out.println("Operador de Multiplicacao: " + image); }
  | < BARRA: "/" > { System.out.println("Operador de Divisao: " + image); }
  | < PORCENTO: "%" > { System.out.println("Operador de Modulo: " + image); }
  | < MAIS_IGUAL: "+=" > { System.out.println("Operador de Mais Igual: " + image); }
  | < MENOS_IGUAL: "-=" > { System.out.println("Operador de Menos Igual: " + image); }
  | < ASTERISCO_IGUAL: "*=" > { System.out.println("Operador de Vezes Igual: " + image); }
  | < BARRA_IGUAL: "/=" > { System.out.println("Operador de Divisao Igual: " + image); }
  | < PORCENTO_IGUAL: "%=" > { System.out.println("Operador de Modulo Igual: " + image); }
}

// IDENTIFICADOR
TOKEN:
{
		<IDENTIFICADOR:
		<LETRA> (<LETRA> | <DIGITO> | "_" )* >
		{
		  System.out.println("Identificador: " +image);
		}

	|	<#LETRA: (["a"-"z", "A"-"Z"])>
	| 	<#DIGITO: ["0"-"9"]>
}

TOKEN :
{
	<TIPOS_BASICOS: <INTEGER_LITERAL> | <FLOATING_LITERAL> | <STRING_LITERAL> | <BOOL_LITERAL> >
  	| < INTEGER_LITERAL: <DECIMAL> >
  		{
    		System.out.println("Literal Int: " + image);
  		}
	| < #DECIMAL: (["+", "-"])? (["0"-"9"])+ >

	| <FLOATING_LITERAL: (["+", "-"])? (["0"-"9"])+ "." (["0"-"9"])+ (["f","F"])? >
  		{
  		  System.out.println("Literal Ponto Flutuante: " + image);
  		}
	| < STRING_LITERAL: "\"" (~["\""] | "\\\"")* "\"" >
  		{
  		  System.out.println("Literal String: " + image);
  		}
	| < BOOL_LITERAL: ("!")? (<TRUE> | <FALSE>) >
  		{
  		  System.out.println("Literal Bool: " + image);
  		}
}

/**************
* *** GRAMATICA LINGUAGEM JAVA ****
***************/

void RUN(): { } { 
	Programa() 
}

void Programa(): { } {
	( 
		(DeclararImport())* DeclararClassePrincipal()
	)
}

void DeclararImport(): {} {
	<IMPORT> <IDENTIFICADOR> (<PONTO> <IDENTIFICADOR>)* <PONTO_VIRGULA>
}

void DeclararClassePrincipal(): {} {
	Modificador() <CLASS> <IDENTIFICADOR> <ABRE_CHAVE> CorpoClasse() <FECHA_CHAVE>
}

void CorpoClasse(): {} {
	( (Modificador())? (<STATIC>)? TiposDeDados() ( <IDENTIFICADOR> (InstanciarVariavel() | InstanciaFuncao()) | Main() ))*
}

void InstanciarVariavel(): {} {
	(<RECEBE> (Expressao() | Input() ) )? (<VIRGULA> <IDENTIFICADOR> (<RECEBE> Expressao())? )* < PONTO_VIRGULA>
}


void InstanciaFuncao(): {} {
	< ABRE_PARENTESES> (ListaDeParametros())? <FECHA_PARENTESES> BlocoDeDeclaracoes()
}

void ListaDeParametros(): {} {
	TiposDeDados() <IDENTIFICADOR> (<VIRGULA> TiposDeDados() <IDENTIFICADOR>)*
}

void Main(): {} {
	<MAIN> <ABRE_PARENTESES> <STRING> <ABRE_COLCHETE> <FECHA_COLCHETE> <IDENTIFICADOR> <FECHA_PARENTESES> BlocoDeDeclaracoes()
}

void BlocoDeDeclaracoes(): {} {
	<ABRE_CHAVE> (CorpoDaDeclaracao())* <FECHA_CHAVE>
}

void CorpoDaDeclaracao(): {} {
	DeclararVariavel()
	| AtribuirVariavel()
	| RetornoDaFuncao() 
	| If_Else()
	| Print() 
	| Input() < PONTO_VIRGULA>
	| While() 
}

void DeclararVariavel(): {} {
	TiposDeDados() <IDENTIFICADOR> (InstanciarVariavel() | InstanciaFuncao() )
}

void AtribuirVariavel(): {} {
	<IDENTIFICADOR> (InstanciarVariavel() | (<INCREMENTO> | <DECREMENTO> | ExpressaoNumericaComAtribuicao() Expressao()) <PONTO_VIRGULA>)
	|(<INCREMENTO> | <DECREMENTO>) <IDENTIFICADOR> < PONTO_VIRGULA> 
}

void ExpressaoNumericaComAtribuicao(): {} {
	< MAIS_IGUAL> | <MENOS_IGUAL> | < ASTERISCO_IGUAL> | < BARRA_IGUAL> | < PORCENTO_IGUAL>
}

void RetornoDaFuncao(): {} {
	<RETURN> (<TIPOS_BASICOS> <PONTO_VIRGULA> | Print() | Expressao()) 
}

void If_Else(): {} {
	<IF> < ABRE_PARENTESES> Expressao() <FECHA_PARENTESES> BlocoDeDeclaracoesWhile() (<ELSE_IF> < ABRE_PARENTESES> Expressao() <FECHA_PARENTESES> BlocoDeDeclaracoesWhile())* ( <ELSE> BlocoDeDeclaracoesWhile())?
}

void Expressao(): { } {
    item() [
        (
            < MENOR >
            | < MAIOR >
            | < MENOR_IGUAL >
            | < MAIOR_IGUAL >
            | < IGUAL >
            | < DIFERENTE >
            | < AND >
            | < OR >
        )
        item()
    ] (
        (<AND> | <OR>) item()
    )?
}

void item(): {} { termo() ( ("+" | "-" termo()) )* }

void termo(): {} {
	itemUnico() (("" | "/" | "%") itemUnico() )
}

void itemUnico(): {} {
	[("+" | "-")] Item()
}

void Item(): {} {
	< INTEGER_LITERAL >
	| < STRING_LITERAL >
	| < FLOATING_LITERAL >
	| < NULL >
	| (< NEGACAO>)? (VariavelExpressao() | < ABRE_PARENTESES> Expressao() < FECHA_PARENTESES> | < TRUE > | < FALSE > )
}

/* UM ITEM PODE SER QUALQUER VALOR: INT, FLOAT, STRING, NULL */

void VariavelExpressao(): {} {
	<IDENTIFICADOR> (<ABRE_PARENTESES> ListaDeArgumentos() <FECHA_PARENTESES> | <INCREMENTO> | <DECREMENTO>)?
}

/*CASO HAJA UMA VARIAVEL NA EXPRESSAO, ELA TEM OS CAMINHOS*/

void Print(): {} {
	<PRINT> <ABRE_PARENTESES> (<TIPOS_BASICOS> | <IDENTIFICADOR>)? <FECHA_PARENTESES> <PONTO_VIRGULA> 
}

void Input(): {} {
	<INPUT> <ABRE_PARENTESES> < FECHA_PARENTESES>	
}

void While(): {} {
	<WHILE> <ABRE_PARENTESES> Expressao() < FECHA_PARENTESES> BlocoDeDeclaracoesWhile()
}

void Modificador(): {} {
	<PRIVATE> | < PROTECTED> | <PUBLIC>
}

void TiposDeDados(): {} {
	<INT>
	| <FLOAT>
	| <STRING>
	| <BOOL>
	| <VOID>
}

void ListaDeArgumentos(): {} {
	Expressao() (<VIRGULA> Expressao())*
}

void BlocoDeDeclaracoesWhile(): {} {
	<ABRE_CHAVE> (CorpoDaDeclaracaoWhile())* <FECHA_CHAVE>
}

void CorpoDaDeclaracaoWhile(): {} {
	DeclararVariavel()
	| AtribuirVariavel()
	| RetornoDaFuncao()
	| If_Else()
	| Print()
	| Input() <PONTO_VIRGULA> 
	| While()
	| <BREAK> <PONTO_VIRGULA>
	| <CONTINUE> <PONTO_VIRGULA>
}