/* Generated By:JavaCC: Do not edit this line. JavaCompiler.java */
public class JavaCompiler implements JavaCompilerConstants {
        public static void main(String[] args) {
                try {
                        String programa = Arquivo.Read("codigoTeste.txt");
                        new JavaCompiler(new java.io.StringReader(programa)).RUN();

                        System.out.println("\n\n Sintaxe exata. Compilado!!!");
                }
                catch(Throwable e) {
                        System.out.println("\n\n Erro de sintaxe: " + e.getMessage());
                }
        }

/**************
* *** GRAMATICA LINGUAGEM JAVA ****
***************/
  final public void RUN() throws ParseException {
    Programa();
  }

  final public void Programa() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPORT:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      DeclararImport();
    }
    DeclararClassePrincipal();
  }

  final public void DeclararImport() throws ParseException {
    jj_consume_token(IMPORT);
    jj_consume_token(IDENTIFICADOR);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PONTO:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jj_consume_token(PONTO);
      jj_consume_token(IDENTIFICADOR);
    }
    jj_consume_token(PONTO_VIRGULA);
  }

  final public void DeclararClassePrincipal() throws ParseException {
    Modificador();
    jj_consume_token(CLASS);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(ABRE_CHAVE);
    CorpoClasse();
    jj_consume_token(FECHA_CHAVE);
  }

  final public void CorpoClasse() throws ParseException {
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case FLOAT:
      case BOOL:
      case STRING:
      case VOID:
      case STATIC:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
        Modificador();
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STATIC:
        jj_consume_token(STATIC);
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      TiposDeDados();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFICADOR:
        jj_consume_token(IDENTIFICADOR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PONTO_VIRGULA:
        case VIRGULA:
        case RECEBE:
          InstanciarVariavel();
          break;
        case ABRE_PARENTESES:
          InstanciaFuncao();
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case MAIN:
        Main();
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void InstanciarVariavel() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RECEBE:
      jj_consume_token(RECEBE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NULL:
      case TRUE:
      case FALSE:
      case ABRE_PARENTESES:
      case NEGACAO:
      case MAIS:
      case MENOS:
      case IDENTIFICADOR:
      case INTEGER_LITERAL:
      case FLOATING_LITERAL:
      case STRING_LITERAL:
        Expressao();
        break;
      case INPUT:
        Input();
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      jj_consume_token(VIRGULA);
      jj_consume_token(IDENTIFICADOR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RECEBE:
        jj_consume_token(RECEBE);
        Expressao();
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
    }
    jj_consume_token(PONTO_VIRGULA);
  }

  final public void InstanciaFuncao() throws ParseException {
    jj_consume_token(ABRE_PARENTESES);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case FLOAT:
    case BOOL:
    case STRING:
    case VOID:
      ListaDeParametros();
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(FECHA_PARENTESES);
    BlocoDeDeclaracoes();
  }

  final public void ListaDeParametros() throws ParseException {
    TiposDeDados();
    jj_consume_token(IDENTIFICADOR);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_5;
      }
      jj_consume_token(VIRGULA);
      TiposDeDados();
      jj_consume_token(IDENTIFICADOR);
    }
  }

  final public void Main() throws ParseException {
    jj_consume_token(MAIN);
    jj_consume_token(ABRE_PARENTESES);
    jj_consume_token(STRING);
    jj_consume_token(ABRE_COLCHETE);
    jj_consume_token(FECHA_COLCHETE);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(FECHA_PARENTESES);
    BlocoDeDeclaracoes();
  }

  final public void BlocoDeDeclaracoes() throws ParseException {
    jj_consume_token(ABRE_CHAVE);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case FLOAT:
      case BOOL:
      case STRING:
      case VOID:
      case RETURN:
      case IF:
      case PRINT:
      case INPUT:
      case WHILE:
      case INCREMENTO:
      case DECREMENTO:
      case IDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_6;
      }
      CorpoDaDeclaracao();
    }
    jj_consume_token(FECHA_CHAVE);
  }

  final public void CorpoDaDeclaracao() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case FLOAT:
    case BOOL:
    case STRING:
    case VOID:
      DeclararVariavel();
      break;
    case INCREMENTO:
    case DECREMENTO:
    case IDENTIFICADOR:
      AtribuirVariavel();
      break;
    case RETURN:
      RetornoDaFuncao();
      break;
    case IF:
      If_Else();
      break;
    case PRINT:
      Print();
      break;
    case INPUT:
      Input();
      jj_consume_token(PONTO_VIRGULA);
      break;
    case WHILE:
      While();
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DeclararVariavel() throws ParseException {
    TiposDeDados();
    jj_consume_token(IDENTIFICADOR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PONTO_VIRGULA:
    case VIRGULA:
    case RECEBE:
      InstanciarVariavel();
      break;
    case ABRE_PARENTESES:
      InstanciaFuncao();
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void AtribuirVariavel() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR:
      jj_consume_token(IDENTIFICADOR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PONTO_VIRGULA:
      case VIRGULA:
      case RECEBE:
        InstanciarVariavel();
        break;
      case INCREMENTO:
      case DECREMENTO:
      case MAIS_IGUAL:
      case MENOS_IGUAL:
      case ASTERISCO_IGUAL:
      case BARRA_IGUAL:
      case PORCENTO_IGUAL:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INCREMENTO:
          jj_consume_token(INCREMENTO);
          break;
        case DECREMENTO:
          jj_consume_token(DECREMENTO);
          break;
        case MAIS_IGUAL:
        case MENOS_IGUAL:
        case ASTERISCO_IGUAL:
        case BARRA_IGUAL:
        case PORCENTO_IGUAL:
          ExpressaoNumericaComAtribuicao();
          Expressao();
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(PONTO_VIRGULA);
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case INCREMENTO:
    case DECREMENTO:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCREMENTO:
        jj_consume_token(INCREMENTO);
        break;
      case DECREMENTO:
        jj_consume_token(DECREMENTO);
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(IDENTIFICADOR);
      jj_consume_token(PONTO_VIRGULA);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ExpressaoNumericaComAtribuicao() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAIS_IGUAL:
      jj_consume_token(MAIS_IGUAL);
      break;
    case MENOS_IGUAL:
      jj_consume_token(MENOS_IGUAL);
      break;
    case ASTERISCO_IGUAL:
      jj_consume_token(ASTERISCO_IGUAL);
      break;
    case BARRA_IGUAL:
      jj_consume_token(BARRA_IGUAL);
      break;
    case PORCENTO_IGUAL:
      jj_consume_token(PORCENTO_IGUAL);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void RetornoDaFuncao() throws ParseException {
    jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIPOS_BASICOS:
      jj_consume_token(TIPOS_BASICOS);
      jj_consume_token(PONTO_VIRGULA);
      break;
    case PRINT:
      Print();
      break;
    case NULL:
    case TRUE:
    case FALSE:
    case ABRE_PARENTESES:
    case NEGACAO:
    case MAIS:
    case MENOS:
    case IDENTIFICADOR:
    case INTEGER_LITERAL:
    case FLOATING_LITERAL:
    case STRING_LITERAL:
      Expressao();
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void If_Else() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(ABRE_PARENTESES);
    Expressao();
    jj_consume_token(FECHA_PARENTESES);
    BlocoDeDeclaracoesWhile();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE_IF:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_7;
      }
      jj_consume_token(ELSE_IF);
      jj_consume_token(ABRE_PARENTESES);
      Expressao();
      jj_consume_token(FECHA_PARENTESES);
      BlocoDeDeclaracoesWhile();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      BlocoDeDeclaracoesWhile();
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
  }

  final public void Expressao() throws ParseException {
    item();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAIOR:
    case MENOR:
    case IGUAL:
    case MAIOR_IGUAL:
    case MENOR_IGUAL:
    case DIFERENTE:
    case OR:
    case AND:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MENOR:
        jj_consume_token(MENOR);
        break;
      case MAIOR:
        jj_consume_token(MAIOR);
        break;
      case MENOR_IGUAL:
        jj_consume_token(MENOR_IGUAL);
        break;
      case MAIOR_IGUAL:
        jj_consume_token(MAIOR_IGUAL);
        break;
      case IGUAL:
        jj_consume_token(IGUAL);
        break;
      case DIFERENTE:
        jj_consume_token(DIFERENTE);
        break;
      case AND:
        jj_consume_token(AND);
        break;
      case OR:
        jj_consume_token(OR);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      item();
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
    case AND:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        jj_consume_token(AND);
        break;
      case OR:
        jj_consume_token(OR);
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      item();
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
  }

  final public void item() throws ParseException {
    termo();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAIS:
      case MENOS:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAIS:
        jj_consume_token(MAIS);
        break;
      case MENOS:
        jj_consume_token(MENOS);
        termo();
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void termo() throws ParseException {
    itemUnico();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 73:
      jj_consume_token(73);
      break;
    case BARRA:
      jj_consume_token(BARRA);
      break;
    case PORCENTO:
      jj_consume_token(PORCENTO);
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    itemUnico();
  }

  final public void itemUnico() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAIS:
    case MENOS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAIS:
        jj_consume_token(MAIS);
        break;
      case MENOS:
        jj_consume_token(MENOS);
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    Item();
  }

  final public void Item() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      jj_consume_token(INTEGER_LITERAL);
      break;
    case STRING_LITERAL:
      jj_consume_token(STRING_LITERAL);
      break;
    case FLOATING_LITERAL:
      jj_consume_token(FLOATING_LITERAL);
      break;
    case NULL:
      jj_consume_token(NULL);
      break;
    case TRUE:
    case FALSE:
    case ABRE_PARENTESES:
    case NEGACAO:
    case IDENTIFICADOR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEGACAO:
        jj_consume_token(NEGACAO);
        break;
      default:
        jj_la1[33] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFICADOR:
        VariavelExpressao();
        break;
      case ABRE_PARENTESES:
        jj_consume_token(ABRE_PARENTESES);
        Expressao();
        jj_consume_token(FECHA_PARENTESES);
        break;
      case TRUE:
        jj_consume_token(TRUE);
        break;
      case FALSE:
        jj_consume_token(FALSE);
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* UM ITEM PODE SER QUALQUER VALOR: INT, FLOAT, STRING, NULL */
  final public void VariavelExpressao() throws ParseException {
    jj_consume_token(IDENTIFICADOR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ABRE_PARENTESES:
    case INCREMENTO:
    case DECREMENTO:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABRE_PARENTESES:
        jj_consume_token(ABRE_PARENTESES);
        ListaDeArgumentos();
        jj_consume_token(FECHA_PARENTESES);
        break;
      case INCREMENTO:
        jj_consume_token(INCREMENTO);
        break;
      case DECREMENTO:
        jj_consume_token(DECREMENTO);
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[37] = jj_gen;
      ;
    }
  }

/*CASO HAJA UMA VARIAVEL NA EXPRESSAO, ELA TEM OS CAMINHOS*/
  final public void Print() throws ParseException {
    jj_consume_token(PRINT);
    jj_consume_token(ABRE_PARENTESES);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR:
    case TIPOS_BASICOS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIPOS_BASICOS:
        jj_consume_token(TIPOS_BASICOS);
        break;
      case IDENTIFICADOR:
        jj_consume_token(IDENTIFICADOR);
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
    jj_consume_token(FECHA_PARENTESES);
    jj_consume_token(PONTO_VIRGULA);
  }

  final public void Input() throws ParseException {
    jj_consume_token(INPUT);
    jj_consume_token(ABRE_PARENTESES);
    jj_consume_token(FECHA_PARENTESES);
  }

  final public void While() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(ABRE_PARENTESES);
    Expressao();
    jj_consume_token(FECHA_PARENTESES);
    BlocoDeDeclaracoesWhile();
  }

  final public void Modificador() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIVATE:
      jj_consume_token(PRIVATE);
      break;
    case PROTECTED:
      jj_consume_token(PROTECTED);
      break;
    case PUBLIC:
      jj_consume_token(PUBLIC);
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void TiposDeDados() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
      break;
    case STRING:
      jj_consume_token(STRING);
      break;
    case BOOL:
      jj_consume_token(BOOL);
      break;
    case VOID:
      jj_consume_token(VOID);
      break;
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ListaDeArgumentos() throws ParseException {
    Expressao();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        ;
        break;
      default:
        jj_la1[42] = jj_gen;
        break label_9;
      }
      jj_consume_token(VIRGULA);
      Expressao();
    }
  }

  final public void BlocoDeDeclaracoesWhile() throws ParseException {
    jj_consume_token(ABRE_CHAVE);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case FLOAT:
      case BOOL:
      case STRING:
      case VOID:
      case RETURN:
      case IF:
      case PRINT:
      case INPUT:
      case WHILE:
      case BREAK:
      case CONTINUE:
      case INCREMENTO:
      case DECREMENTO:
      case IDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[43] = jj_gen;
        break label_10;
      }
      CorpoDaDeclaracaoWhile();
    }
    jj_consume_token(FECHA_CHAVE);
  }

  final public void CorpoDaDeclaracaoWhile() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case FLOAT:
    case BOOL:
    case STRING:
    case VOID:
      DeclararVariavel();
      break;
    case INCREMENTO:
    case DECREMENTO:
    case IDENTIFICADOR:
      AtribuirVariavel();
      break;
    case RETURN:
      RetornoDaFuncao();
      break;
    case IF:
      If_Else();
      break;
    case PRINT:
      Print();
      break;
    case INPUT:
      Input();
      jj_consume_token(PONTO_VIRGULA);
      break;
    case WHILE:
      While();
      break;
    case BREAK:
      jj_consume_token(BREAK);
      jj_consume_token(PONTO_VIRGULA);
      break;
    case CONTINUE:
      jj_consume_token(CONTINUE);
      jj_consume_token(PONTO_VIRGULA);
      break;
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /** Generated Token Manager. */
  public JavaCompilerTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[45];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2000,0x0,0x3d0f00,0x380000,0x40000,0x0,0x8000,0x16001000,0x0,0x0,0x0,0x10f00,0x0,0x38430f00,0x38430f00,0x0,0x0,0x0,0x0,0x0,0x0,0xe001000,0x800000,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x6000000,0x6001000,0x0,0x0,0x0,0x0,0x380000,0x10f00,0x0,0xf8430f00,0xf8430f00,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x100,0x0,0x0,0x0,0x2c1,0x0,0xc01001,0x200,0x80,0x200,0x0,0x80,0x300000,0x300000,0x2c1,0xf8300000,0xf83002c0,0x300000,0x300000,0xf8000000,0xc01001,0x0,0x0,0xfcc00,0xfcc00,0xc0000,0xc0000,0xc00000,0xc00000,0x6000000,0xc00000,0xc00000,0x1000,0x1,0x1001,0x300001,0x300001,0x0,0x0,0x0,0x0,0x80,0x300000,0x300000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x1,0xd1,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0xd9,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x0,0x1,0xd1,0x0,0x0,0x9,0x9,0x0,0x0,0x0,0x1,0x1,};
   }

  /** Constructor with InputStream. */
  public JavaCompiler(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JavaCompiler(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JavaCompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public JavaCompiler(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JavaCompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public JavaCompiler(JavaCompilerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(JavaCompilerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[74];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 45; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 74; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
